name: CD

on:
  workflow_dispatch:  # Allow manual triggering
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
      - '.github/workflows/**'  # Skip CD for workflow-only changes
      - 'LICENSE'
      - '.gitignore'
      - '.prettierignore'
      - '.eslintignore'
      - '.vscode/**'
      - '.editorconfig'

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      pr: ${{ steps.release.outputs.pr }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node

      # Auto-merge release PRs after checks pass
      - name: Enable auto-merge for release PR
        if: ${{ steps.release.outputs.pr }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          PR_NUMBER: ${{ fromJSON(steps.release.outputs.pr).number }}
        run: |
          echo "Enabling auto-merge for PR #${PR_NUMBER}"
          gh pr merge ${PR_NUMBER} --auto --merge

  build-and-upload:
    needs: release-please
    # Run if release was created OR if manually triggered
    if: ${{ needs.release-please.outputs.release_created || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: pnpm/action-setup@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v5
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test run

      - name: Build extension
        run: pnpm build

      - name: Get version
        id: get-version
        run: |
          if [ "${{ needs.release-please.outputs.version }}" != "" ]; then
            echo "VERSION=${{ needs.release-please.outputs.version }}" >> $GITHUB_OUTPUT
            echo "TAG_NAME=${{ needs.release-please.outputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            # Get version from package.json for manual runs
            VERSION=$(node -p "require('./package.json').version")
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
            echo "TAG_NAME=v${VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Create ZIP archive
        run: |
          cd dist
          zip -r ../chrome-markdownify-v${{ steps.get-version.outputs.VERSION }}.zip .
          cd ..

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get-version.outputs.TAG_NAME }}
          files: chrome-markdownify-v${{ steps.get-version.outputs.VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}